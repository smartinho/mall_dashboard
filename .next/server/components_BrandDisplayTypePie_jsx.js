"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "components_BrandDisplayTypePie_jsx";
exports.ids = ["components_BrandDisplayTypePie_jsx"];
exports.modules = {

/***/ "./components/BrandDisplayTypePie.jsx":
/*!********************************************!*\
  !*** ./components/BrandDisplayTypePie.jsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BrandDisplayTypePie)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst Plot = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(()=>Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! react-plotly.js */ \"react-plotly.js\", 23)), {\n    loadableGenerated: {\n        modules: [\n            \"..\\\\components\\\\BrandDisplayTypePie.jsx -> \" + \"react-plotly.js\"\n        ]\n    },\n    ssr: false\n});\nconst getColor = (i, total)=>`hsl(${Math.round(i / total * 360)},65%,50%)`;\nfunction BrandDisplayTypePie({ data, width = \"100%\", height = \"100%\", limit }) {\n    if (!Array.isArray(data) || data.length === 0) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            style: {\n                padding: 20,\n                textAlign: \"center\"\n            },\n            children: \"No data\"\n        }, void 0, false, {\n            fileName: \"E:\\\\mall_dashboard\\\\components\\\\BrandDisplayTypePie.jsx\",\n            lineNumber: 14,\n            columnNumber: 12\n        }, this);\n    }\n    const brandMap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const m = {};\n        data.forEach(({ Brand, \"Display Type\": dt })=>{\n            if (!Brand || !dt) return;\n            m[Brand] ||= {};\n            m[Brand][dt] = (m[Brand][dt] || 0) + 1;\n        });\n        return m;\n    }, [\n        data\n    ]);\n    const entries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return Object.entries(brandMap).map(([brand, dtMap])=>({\n                brand,\n                dtMap,\n                count: Object.values(dtMap).reduce((a, v)=>a + v, 0)\n            })).sort((a, b)=>b.count - a.count);\n    }, [\n        brandMap\n    ]);\n    const isGrid = limit == null;\n    const displayEntries = isGrid ? entries : entries.slice(0, limit);\n    const allDT = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Array.from(new Set(data.map((r)=>r[\"Display Type\"]).filter(Boolean))), [\n        data\n    ]);\n    const colorMap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const cm = {};\n        allDT.forEach((dt, i)=>{\n            cm[dt] = getColor(i, allDT.length);\n        });\n        return cm;\n    }, [\n        allDT\n    ]);\n    const traces = [];\n    const annotations = [];\n    if (isGrid) {\n        const N = displayEntries.length;\n        const cols = Math.min(10, N);\n        const rows = Math.ceil(N / cols);\n        const cw = 1 / cols;\n        const ch = 1 / rows;\n        const gapX = 0.02;\n        const gapY = 0.05;\n        const maxCount = Math.max(...displayEntries.map((e)=>e.count));\n        displayEntries.forEach((e, idx)=>{\n            const row = Math.floor(idx / cols);\n            const col = idx % cols;\n            const cx = col * cw + cw / 2;\n            const cy = 1 - (row * ch + ch / 2);\n            const w = cw - gapX;\n            const h = ch - gapY;\n            const x0 = cx - w / 2;\n            const x1 = cx + w / 2;\n            const y0 = cy - h / 2;\n            const y1 = cy + h / 2;\n            traces.push({\n                type: \"pie\",\n                labels: Object.keys(e.dtMap),\n                values: Object.values(e.dtMap),\n                marker: {\n                    colors: Object.keys(e.dtMap).map((d)=>colorMap[d])\n                },\n                domain: {\n                    x: [\n                        x0,\n                        x1\n                    ],\n                    y: [\n                        y0,\n                        y1\n                    ]\n                },\n                hovertemplate: `<b>${e.brand}</b><br>` + `%{label}: %{value} (%{percent})<extra></extra>`,\n                textinfo: \"none\",\n                showlegend: false\n            });\n            annotations.push({\n                text: `${e.brand} (${e.count})`,\n                x: cx,\n                y: y0 - 0.01,\n                xref: \"paper\",\n                yref: \"paper\",\n                xanchor: \"center\",\n                yanchor: \"top\",\n                showarrow: false,\n                font: {\n                    size: 10,\n                    color: \"#000\"\n                }\n            });\n        });\n    } else {\n        const total = displayEntries.reduce((s, e)=>s + e.count, 0);\n        const n = displayEntries.length;\n        const gap = 0.05;\n        const totalGap = gap * (n - 1);\n        const effectiveWidth = 1 - totalGap;\n        let x0 = 0;\n        displayEntries.forEach((e)=>{\n            const frac = e.count / total;\n            const w = frac * effectiveWidth;\n            const x1 = x0 + w;\n            traces.push({\n                type: \"pie\",\n                labels: Object.keys(e.dtMap),\n                values: Object.values(e.dtMap),\n                marker: {\n                    colors: Object.keys(e.dtMap).map((d)=>colorMap[d])\n                },\n                domain: {\n                    x: [\n                        x0,\n                        x1\n                    ],\n                    y: [\n                        0,\n                        1\n                    ]\n                },\n                hovertemplate: `<b>${e.brand}</b><br>` + `%{label}: %{value} (%{percent})<extra></extra>`,\n                textinfo: \"none\",\n                showlegend: false\n            });\n            annotations.push({\n                text: `${e.brand} (${e.count})`,\n                x: x0 + w / 2,\n                y: -0.15,\n                xref: \"paper\",\n                yref: \"paper\",\n                xanchor: \"center\",\n                yanchor: \"top\",\n                showarrow: false,\n                font: {\n                    size: 12,\n                    color: \"#000\"\n                },\n                textangle: 15\n            });\n            x0 = x1 + gap;\n        });\n    }\n    const layout = {\n        autosize: true,\n        margin: {\n            l: 20,\n            r: 20,\n            t: 20,\n            b: isGrid ? 20 : 80\n        },\n        annotations\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Plot, {\n        data: traces,\n        layout: layout,\n        useResizeHandler: true,\n        style: {\n            width,\n            height\n        }\n    }, void 0, false, {\n        fileName: \"E:\\\\mall_dashboard\\\\components\\\\BrandDisplayTypePie.jsx\",\n        lineNumber: 152,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/BrandDisplayTypePie.jsx\n");

/***/ })

};
;